class Solution {
    public int solution(int n, int[] tops) {
        // 타일링 문제 
        int answer = 0;
        // dp[i][0] = 우하단 세모가 유지되지 않은 경우(마름모에 포함됨)
        // dp[i][1] = 우하단 세모가 유지되어 이후 사용 가능한 경우
        
        int[][] dp = new int[n+1][2];
    
        dp[0][0] = 0;
        dp[0][1] = 1;
        
        for(int i=1;i<=n;i++){  

            //이전 칸(i-1)이 마름모로 끝났음 (dp[i-1][0]) → 이번 칸에 마름모 타일 하나 올리면 됨
            // 이전 칸에 삼각형이 남아있었음 (dp[i-1][1]) → 이번 칸에 그 삼각형과 새 삼각형을 합쳐서 마름모로 덮기
            dp[i][0]= (dp[i-1][0] + dp[i-1][1]) %10007;
            
            //삼각형 살아잇는상태
            //이전 칸이 마름모였던 경우 (dp[i-1][0]) → 이번 칸에 아래 삼각형 하나만 붙이면 됨 (삼각형 1개 살아있게 됨) → 1가지

            //이전 칸이 삼각형이 살아있는 상태 (dp[i-1][1]) → 이번 칸에 아래 삼각형 1개를 추가해도 되고,위삼각형 없이 마름모 만드는 건 안 됨
            // → 2가지 방식 (삼각형 그대로, 또는 새로운 삼각형 추가
            //    tops[i-1] == 1 (위 삼각형 있음)

            dp[i][1]= (tops[i-1]==1 ? 2*dp[i-1][0] + 3 * dp[i-1][1] : dp[i-1][0] + 2 * dp[i-1][1])%10007 ;
        }
        answer = (dp[n][0] + dp[n][1])%10007;
        return answer;
    }
}