function solution(n, tops) {
    const MOD = 10007;

    // dp[i][0] = i번째 칸까지 정상적으로 채운 경우의 수
    // dp[i][1] = i번째 칸에서 위쪽 삼각형이 남아있는 경우의 수
    const dp = new Array(n + 1).fill(null).map(() => [0, 0]);

    // 초기 상태: 아무것도 없는 상태는 1가지
    dp[0][0] = 1;

    for (let i = 0; i < n; i++) {
        if (tops[i]) {
            // 위쪽에 삼각형이 있는 경우: 마름모 + 위삼각형 포함해서 3가지
            dp[i + 1][0] = dp[i][0] * 3 + dp[i][1] * 2;
        } else {
            // 없는 경우: 마름모/삼각형만 포함해서 2가지
            dp[i + 1][0] = dp[i][0] * 2 + dp[i][1] * 1;
        }

        // 위쪽 삼각형만 남기는 경우: 이전 칸에서 정상적으로 끝났거나 위가 남은 경우 둘 다 가능
        dp[i + 1][1] = dp[i][0] + dp[i][1];

        // 모듈러 연산 적용
        dp[i + 1][0] %= MOD;
        dp[i + 1][1] %= MOD;
    }

    // 마지막 칸까지 모두 채운 경우와 위 삼각형이 남은 경우 모두 더해줌
    return (dp[n][0] + dp[n][1]) % MOD;
}
